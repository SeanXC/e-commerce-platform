name: Backend CI/CD

on:
  push:
    branches: [main]

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: --health-cmd="mongosh --eval 'db.runCommand({ping:1})'" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          
      - name: Test Backend Services
        run: |
          chmod +x backend/addToCart/mvnw
          chmod +x backend/productdetailsservice/mvnw
          chmod +x backend/usermetadata/mvnw
          cd backend/addToCart && ./mvnw test -Dspring.profiles.active=test && cd ../..
          cd backend/productdetailsservice && ./mvnw test -Dspring.profiles.active=test && cd ../..
          cd backend/usermetadata && ./mvnw test -Dspring.profiles.active=test && cd ../..  
          
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and Push Docker Images
        run: |
          # Build and push AddToCart service
          cd backend/addToCart
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-addtocart:latest \
                       -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-addtocart:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-addtocart:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-addtocart:${{ github.sha }}
          
          # Build and push ProductDetails service
          cd ../productdetailsservice
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-productdetails:latest \
                       -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-productdetails:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-productdetails:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-productdetails:${{ github.sha }}
          
          # Build and push UserMetadata service
          cd ../usermetadata
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-usermetadata:latest \
                       -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-usermetadata:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-usermetadata:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-usermetadata:${{ github.sha }}
          
      # Temporarily commented out Render deployment for Docker testing
      # - name: Deploy to Render
      #   run: |
      #     # Deploy AddToCart service
      #     curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_ADDTOCART_SERVICE_ID }}/deploys" \
      #       -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{"clearCache": false}'
      #     
      #     # Deploy ProductDetails service
      #     curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_PRODUCTDETAILS_SERVICE_ID }}/deploys" \
      #       -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{"clearCache": false}'
      #     
      #     # Deploy UserMetadata service
      #     curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_USERMETADATA_SERVICE_ID }}/deploys" \
      #       -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{"clearCache": false}'
